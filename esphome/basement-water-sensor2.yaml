esphome:
  name: esphome-web-112201
  friendly_name: basement-water-sensor-2
  includes:
    - water_sensor.h

esp8266:
  board: esp01_1m

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret basement_water_sensor_2_hassio_encryption_key

ota:
  - platform: esphome
    password: !secret ota_update_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "basement-water-sensor-2"
    password: !secret captive_portal_password

captive_portal:

text_sensor:
  - platform: template
    name: Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start

sensor:
  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
    disabled_by_default: true
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();
  - platform: wifi_signal
    name: "WiFi Strength"
    disabled_by_default: true
    update_interval: 60s
  - platform: duty_cycle
    pin: GPIO5
    id: water_level_1
    name: "Water level 1 sensor"
    update_interval: 3s
    internal: true
  - platform: duty_cycle
    pin: GPIO4
    id: water_level_2
    name: "Water level 2 sensor"
    update_interval: 3s
    internal: true
  - platform: duty_cycle
    pin: GPIO13
    id: water_level_3
    name: "Water level 3 sensor"
    update_interval: 3s
    internal: true

binary_sensor:
  - platform: template
    id: water_detected_1
    name: "Water 1"
    device_class: moisture
    lambda: |-
      return isThresholdReached(id(water_level_1).state);
  - platform: template
    id: water_detected_2
    name: "Water 2"
    device_class: moisture
    lambda: |-
      return isThresholdReached(id(water_level_2).state);
  - platform: template
    id: water_detected_3
    name: "Water 3"
    device_class: moisture
    lambda: |-
      return isThresholdReached(id(water_level_3).state);
  - platform: template
    id: water_detected_master
    name: "Water detected master"
    internal: True
    lambda: |-
      if(id(water_detected_1).state || id(water_detected_2).state || id(water_detected_3).state) {
        return true;
      } else {
        return false;
      }
    on_press:
      then:
        output.turn_on: buzzer_output
    on_release:
      then:
        output.turn_off: buzzer_output

output:
  - platform: gpio
    pin: GPIO14
    id: buzzer_output